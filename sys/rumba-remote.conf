# -*- coding: utf-8 -*-
#####################################
# rumba status daemon configuration #
#####################################
# the default lookup for this file
# is in the users home directory
# (eg ~/.config/rumba-remote/rumba-remote.conf)
#
# a different path can be passed
# with the --configFile parameter on startup
# (eg 'python3 rumba-remote --configFile /opt/rumba-remote/rumba-remote.conf)


#######################
# controller settings #
#######################

# The controller connects various inputs with jukebox or addon functions
# and provides a simple menu system, where an input 'MENU.TOGGLE' switches
# between various menu rows

[controller]

# Define at least one menu row here, by directly specifying actions from the
# jukebox or addon modules. A menurow has between 3 to 8 items, define
# the corresponding devices/inputs 'MENU.1' .. 'MENU.X' in the io-section
# no default, required param (for now)
#
# 5 btns, 3 rows
#menuRow = RUMBA.PREV, RUMBA.PLAYPAUSE, RUMBA.NEXT, RUMBA.STAR
#menuRow = RUMBA.RANDOM, RUMBA.APPROX, RUMBA.SUBS, RUMBA.LANG
#menuRow = C64.ENABLE, MAME.ENABLE, PROJECTM.ENABLE, SYSTEM.SHUTDOWN
#
# 4 btns, 2 rows
menuRow = RUMBA.PREV, RUMBA.PLAYPAUSE, RUMBA.NEXT
menuRow = RUMBA.RANDOM, RUMBA.APPROX, RUMBA.STAR

# display an image with the menu toggle button
# on the left or right side of the other icons in the menurow
# this is just a visual cue of the mapping from buttons to the menu in the ui
# eg if you configure the leftmost button to be the menu toggle
# it might help to have the toggle button also as an icon
# on the leftmost side of all menu rows
# default: True (toggle icon is shown on the left side)
#
#menuAlignLeft =

# Time in seconds the menu is active
# after a key was pressed
# default: 5
#
#menuTimeout =

# Set jukebox video-out on startup?
# True/False explicitly sets video-out on every jukebox (re-)connect
# None does not call the server unless enableVideo() 
# has been used manually before
# default: None
#
#enableVideo = 


########################
# input/output handler #
########################

# configure one or many of the existing io-handlers here
# or see src/devices/* for examples to implement your own
# to configure multiple devices of the same type
# add a unique suffix eg "[io.keyboard.blackstar]"

[io.keyboard]
# Use of a generic usb keyboard is the most common input method
# After the specifc keyboards are initialized (see next section)
# only devices with keys AND status leds are considered
# to filter out everything non keyboard - if your device is not found
# please supply its name and try again as a specific device
#
# Inputs do either menu calls (MENU.*), injected key/-combo presses (KEY.*)
# or directly call jukebox or addon functions (RUMBA.*/SYSTEM.* etc)
#
# Outputs are quite limited because keyboards usually have only 3 Leds
# currently configured are: 'MENU' (use 1 or more as menu page indicator),
# 'RUMBA.CONNECTED' (indicates jukebox started) and RUMBA.VIDEO (show video output state)
#
# for all evdev.ecodes KEYs/LEDs see:
# https://github.com/torvalds/linux/blob/master/include/uapi/linux/input-event-codes.h
#
# use sys/keyboardTester.py to display device names
# and test keycodes/led_constants for your config

# example: keyboard with 3 LEDs and a menu with 4 items + direct video switch
input = MENU.TOGGLE, KEY_ENTER
input = MENU.1, KEY_LEFTCTRL
input = MENU.2, KEY_SPACE
input = MENU.3, KEY_RIGHTCTRL
input = MENU.4, KEY_RIGHTALT
input = RUMBA.VIDEO, KEY_V
output = RUMBA.CONNECTED, LED_SCROLLL
output = MENU, LED_NUML
output = MENU, LED_CAPSL

[io.keyboard.blackstar]
# specific device: deviceName has to be set to match specific keyboard
# no other check (status leds..) so especially usefull for custom keyboards
# use sys/keyboardTester.py to display device names
#deviceName = 

# example: keyboard with 3 LEDs and a menu with 4 items
#deviceName = LITEON Technology USB Multimedia Keyboard
#input = MENU.TOGGLE, KEY_3
#input = MENU.1, KEY_L
#input = MENU.2, KEY_KP1
#input = MENU.3, KEY_BACKSLASH
#input = MENU.4, KEY_J
#output = RUMBA.CONNECTED, LED_SCROLLL
#output = MENU, LED_NUML
#output = MENU, LED_CAPSL

[io.gpio]
# Direct input/output via gpio pins, can be configured similar
# to the keyboards with (board-)pins instead of keycodes
# To configure a switch instead of a pushbutton, prepend the pin with 's'
# Switch functions are calledd with their current state
# and get also called with their initial state on startup

# example: pushbuttons for menu with 4 items, switch for video-out and 2 leds
#input = MENU.TOGGLE, 11
#input = MENU.1, 13
#input = MENU.2, 15
#input = MENU.3, 16
#input = MENU.4, 18
#input = RUMBA.VIDEO, s19
#output = RUMBA.CONNECTED, 12
#output = RUMBA.VIDEO, 26

[io.signal]
# use for quick&easy messages from inputs that don't need full ipc
# eg "kill -s SIGUSR1 $PID_RUMBA_REMOTE"
# the configuration below reacts to video cable (dis-)connects
# see sys/kanshi* for the bash scripts used in this example

# type of posix signal to listen to
# default: SIGUSR1
#
#signalType = 

# controller function to invoke on signal
# no default, required param
#
#ctrlAction = RUMBA.VIDEO

# absolute path'd json file with arguments
# to be supplied to the controller function
# default: None (func called without args)
#
#argsFile = /home/pi/.config/rumba-remote/video.out

[io.display]
# display panel configuration

# hw-display rotation on linux is not always available,
# so the application offers a way to directly rotate the ui before display
# leftover from e-paper focused origin but can be handy nevertheless
# eg for overrriding the compositors screen orientation on mobile devices
# possible values: 0, 1 (90°), 2 (180°), 3 (270°)
# default: 0 (no rotation)
#
#rotation =

# Autodetection of the display resolution should work fine with SDL,
# use this to override if needed
# format example: 800x480
# default: None (autodetection by SDL/pygame)
#
#resolution =

# Absolute path to a directory with image files
# for the slideshow/screensaver
# default: None (screensaver deactivated)
#
#slideshowDir =

# Time in seconds a single screensaver/slideshow image is shown
# as well as the time until slideshow starts again, after pause playback
# default: 30
#
#slideshowTimeout =

# SDL environment variable for display output (SDL_VIDEODRIVER)
# https://wiki.libsdl.org/FAQUsingSDL
# default: not set  (def is x11 on linux for sdl2)
#
#envSDL = wayland

# override loglevel for ui-code (can be quite verbose)
# default: not set (same as general logging)
#
#logLevel = DEBUG


####################
# jukebox settings #
####################

# access to rumba jukebox server
# same default values as rumba server defaults

[jukebox]

# url of rumba server api, defaults to localhost
# default: http://127.0.0.1:23232/rest/
#
#url =

# username for rumba jukebox access
# default: admin
#
#username =

# password for user
# default: admin
#
#password =

# folderIDs to exclude from random songs etc
# eg for excluding video or audiobook folders
# comma seperated list
# default: None
#
#excludeFolders =


###################
# addons settings #
###################

# plugin support for extensions with or without config
# see src/addons/* for examples

[addons]

# Custom addons CAN get their settings from here
# although creating a section is not always necessary
# and the addon will init regardless - optinal or mandatory
# config depends on the addons needs
# (see its __init__ method)
# mandatory cfg example: addons.bublbobl)
# optional cfg example: addons.bubblem)

[addons.C64]
# starts the vice c64 emulator

# command for emulator startup
# default: x64
#
#cmd =

[addons.Mame]
# starts arcade emulation with mame

# command for emulator startup
# default: exec mame -autoframeskip -video accel -prescale 1 -nowindow -nofilter
#
#cmd =

[addons.bublbobl]
# starts the c64 game Bubble Bobble with the vice emulator

# command has to be supplied because the absolute path to rom/snapshot
# is needed for emulator startup
# no default, cmd is mandatory
#
#cmd = x64 /home/pi/.vice/C64/saves/bbobble.vsf

#[addons.bubblem]
# starts the arcade game Bubble Memories emulated by mame
# This config section and also the command option are both mandatory
# default: exec mame bubblem -autoframeskip -video accel -prescale 1 -nowindow -nofilter
#
#cmd =

[addons.Projectm]
# use the projecm visualizer as part of the jukebox

# projectm might take way! longer to start if lots of presets need to be loaded
# manually adjust the time the controller waits for projectm startup feedback
# default: 5
#
#startupTime =

###################
# logging / debug #
###################

[logging]

# absolute path'd log file
# default: ~/.config/rumba-remote/status.log
#
#logFile =

# log level for logfiles
# possible values: NONE, CRITICAL, ERROR, WARNING, INFO, DEBUG
# default: WARNING
#
#logLevel =

# change log level for server communication
# on debug things tend to get quite verbose
# so this can separately lower/raise communication logging 
# possible values: NONE, CRITICAL, ERROR, WARNING, INFO, DEBUG
# default: no changes to general logLevel
#
#logLevelServer =
